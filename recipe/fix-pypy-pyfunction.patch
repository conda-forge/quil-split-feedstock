--- quil-py/src/program/mod.rs  2024-04-23 11:59:41.000000000 -0500
+++ quil-py/src/program/mod.rs  2024-05-01 15:50:50.208629563 -0500
@@ -20,6 +20,8 @@
     pyo3::{
         exceptions::PyValueError,
         prelude::*,
+        types::{PyBytes, PyCFunction, PyList},
+#[cfg(all(not(Py_LIMITED_API), not(PyPy)))]
         types::{PyBytes, PyFunction, PyList},
         IntoPy,
     },
@@ -251,6 +253,8 @@
             .to_owned())
     }

+    pub fn filter_instructions(&self, py: Python, predicate: Py<PyCFunction>) -> PyResult<Self> {
+#[cfg(all(not(Py_LIMITED_API), not(PyPy)))]
     pub fn filter_instructions(&self, py: Python, predicate: Py<PyFunction>) -> PyResult<Self> {
         let filtered = self.as_inner().filter_instructions(|inst| {
             Python::with_gil(|py| {
@@ -290,7 +294,11 @@
     #[pyo3(signature = (*, target_resolver = None, qubit_resolver = None))]
     pub fn resolve_placeholders_with_custom_resolvers(
         &mut self,
+        target_resolver: Option<Py<PyCFunction>>,
+#[cfg(all(not(Py_LIMITED_API), not(PyPy)))]
         target_resolver: Option<Py<PyFunction>>,
+        qubit_resolver: Option<Py<PyCFunction>>,
+#[cfg(all(not(Py_LIMITED_API), not(PyPy)))]
         qubit_resolver: Option<Py<PyFunction>>,
     ) {
         #[allow(clippy::type_complexity)]
